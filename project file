package dictionaryProject;

import java.util.ArrayList;
import java.util.*;



public class Main {

    static ArrayList<Object> wordMeaning =new ArrayList<Object>();

    public static void main(String[] args) {
	    Trie myTrie = new Trie();
	    
	    
	    myTrie.insert("able"); //add word
        wordMeaning.add(" good at what you do"); //add meaning
        
        
        
        myTrie.insert("active"); 
        wordMeaning.add("busy with a particular activity"); 
        
        
        
        myTrie.insert("black"); 
        wordMeaning.add("having the darkest colour  "); 
        
        
        
        myTrie.insert("come"); 
        wordMeaning.add(" to move or travel towards the speaker");
        
        
        
        myTrie.insert("dear"); 
        wordMeaning.add("liked very much"); 
        
        
        
        myTrie.insert("enjoy"); 
        wordMeaning.add("to get pleasure from something");
        
        
        
        
        
        
        
        
        myTrie.insert("read"); 
        wordMeaning.add("to look at words"); 
        
        myTrie.insert("understand"); 
        wordMeaning.add("to know the meaning of something that someone says"); 
        
        
        
        myTrie.insert("yellow"); //add word
        wordMeaning.add("a colour like that of a lemon"); 
        
	    
	    
        
	    
        myTrie.insert("cat"); //add word
        wordMeaning.add("a cute furry animal"); //add meaning
        
        
        
       
        
        
        
        
        myTrie.insert("dog");
        wordMeaning.add("man's best friend");
        
        myTrie.insert("man");
        wordMeaning.add("animal on two legs");
        
        myTrie.insert("can");
        wordMeaning.add("a type of container for storing liquids");
        
        myTrie.insert("ban"); 
        wordMeaning.add("to prohibit something");
        
        
        
      
        
        System.out.println();
        
        //search word 
        if(myTrie.search("hello")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println();
        }
        
        
        
        
        if(myTrie.search("welcome")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println();
        }
        
        
        
        
        
        if(myTrie.search("better")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println();
        }
        
        
        
        
        if(myTrie.search("nice")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println();
        }
        
        
        
        
        if(myTrie.search("able")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("able: "+wordMeaning.get(0)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        
        
        if(myTrie.search("active")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("active: "+wordMeaning.get(1)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        
        if(myTrie.search("black")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("black: "+wordMeaning.get(2)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        
        if(myTrie.search("come")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("come: "+wordMeaning.get(3)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        if(myTrie.search("dear")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("dear: "+wordMeaning.get(4)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        
        if(myTrie.search("enjoy")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("enjoy: "+wordMeaning.get(5)); //get meaning from array list
        	System.out.println();
        }
        
        
        

        
        
        
        if(myTrie.search("read")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("read: "+wordMeaning.get(6)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        if(myTrie.search("understand")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("understand: "+wordMeaning.get(7)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        if(myTrie.search("yellow")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("yellow: "+wordMeaning.get(8)); //get meaning from array list
        	System.out.println();
        }
        
        
        
        
        
        
        
        
        if(myTrie.search("cat")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        	
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("Cat: "+wordMeaning.get(9)); //get meaning from array list
        	System.out.println();
        }
        
        
        if(myTrie.search("dog")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("Dog: "+wordMeaning.get(10));
        	System.out.println();
        }
        
        
        if(myTrie.search("man")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("Man: "+wordMeaning.get(11));
        	System.out.println();
        }
        
        
        if(myTrie.search("can")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("Can: "+wordMeaning.get(12));
        	System.out.println();
        }
        
        
        if(myTrie.search("ban")==false){
        	System.out.println("Word is not in dictionary");
        	System.out.println();
        }
        else{
        	System.out.println("Word found in dictionary");
        	System.out.println("Ban: "+wordMeaning.get(13));
        	System.out.println();
   
       
    }
        
        
        String word;
        Scanner scan =new Scanner(System.in);
       
       System.out.println("Enter string element to search");
       word=scan.nextLine();
        if(Objects.equals( "ban",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("Ban: "+wordMeaning.get(13));
        	System.out.println();
            
        }    
        
        if(Objects.equals( "can",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("can: "+wordMeaning.get(12));
        	System.out.println();
            
        }    
            if(Objects.equals( "man",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("man: "+wordMeaning.get(11));
        	System.out.println();
            
        }    
           if(Objects.equals( "dog",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("dog: "+wordMeaning.get(10));
        	System.out.println();
            
        }    
         if(Objects.equals( "cat",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("c: at"+wordMeaning.get(9));
        	System.out.println();
            
        }    
           if(Objects.equals( "yellow",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("yellow: "+wordMeaning.get(8));
        	System.out.println();
            
        }    
          if(Objects.equals( "understand",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("understand: "+wordMeaning.get(7));
        	System.out.println();
            
        }    
        
        if(Objects.equals( "read",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("read: "+wordMeaning.get(6));
        	System.out.println();
            
        }    
            if(Objects.equals( "enjoy",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("enjoy: "+wordMeaning.get(5));
        	System.out.println();
            
        }    
           if(Objects.equals( "dear",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("dear: "+wordMeaning.get(4));
        	System.out.println();
            
        }    
           if(Objects.equals( "come",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("come: "+wordMeaning.get(3));
        	System.out.println();
            
        }    
           if(Objects.equals( "black",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("black: "+wordMeaning.get(2));
        	System.out.println();
            
        }    
            if(Objects.equals( "active",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("active: "+wordMeaning.get(1));
        	System.out.println();
            
        }    
          if(Objects.equals( "able",new String(word)))
        {
        	System.out.println("Word found in dictionary");
        	System.out.println("able: "+wordMeaning.get(0));
        	System.out.println();
            
        }    
        
        
        String deletion;
        
        System.out.println("Enter string element to delete");
        deletion=scan.nextLine();
    	String master="active,black,come,dear,enjoy,understand ,yellow, cat,ban,dog,man,able";
    	
    	String newstring=master.replace(deletion,"");
    
    	System.out.println("words left in dictionary is "+newstring);
        }
    
  
    

}



———————————————————————————————————————————————————————————————————————————————





package dictionaryProject;

 class Trie {
    private TrieNode root;
 
    public Trie() {
        root = new TrieNode();
        
        
    }
 
    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode p = root;
        for(int i=0; i<word.length(); i++){
            char c = word.charAt(i);
            int index = c-'a';
            if(p.arr[index]==null){
                TrieNode temp = new TrieNode();
                p.arr[index]=temp;
                p = temp;
            }else{
                p=p.arr[index];
            }
        }
        p.isEnd=true;
        System.out.println("The word "+word+ " has been added to the dictionary");
        System.out.println();
        
    }
 
    // Returns if the word is in the trie.
    public boolean search(String word) {
    	System.out.println("Searching for word: "+word);
        TrieNode p = searchNode(word);
        if(p==null){
            return false;
        }else{
            if(p.isEnd)
                return true;
        }
 
        return false;
    }
 
    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode p = searchNode(prefix);
        if(p==null){
            return false;
        }else{
            return true;
        }
    }
 
    public TrieNode searchNode(String s){
        TrieNode p = root;
        for(int i=0; i<s.length(); i++){
            char c= s.charAt(i);
            int index = c-'a';
            if(p.arr[index]!=null){
                p = p.arr[index];
            }else{
                return null;
            }
        }
 
        if(p==root)
            return null;
 
        return p;
    }
    
    public void remove(String word)
    {
    	 TrieNode p = root;
         for(int i=0; i<word.length(); i++){
             char c= word.charAt(i);
             int index = c-'a';
             if(p.arr[index]!=null){
                 p = p.arr[index];
             }
             else
            	 System.out.println("the word is not in dictionary");
       
        
    }
   
}  
    }
 

—————————————————————————————————————————————————————————————————————



package dictionaryProject;


class TrieNode {
    TrieNode[] arr;
    boolean isEnd;
    int count=0;
	public Object childList;
    
    // Initialize your data structure here.
    public TrieNode() {
        this.arr = new TrieNode[26];
        
    }
 
}

